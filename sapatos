import tkinter as tk
from tkinter import ttk, messagebox
import sqlite3

class SistemaFabricaSapatos:
    def __init__(self, root):
        self.root = root
        self.root.title("Sistema de Fábrica de Sapatos")

        # Conectar ao banco de dados SQLite
        self.conn = sqlite3.connect("sapatos.db")
        self.c = self.conn.cursor()

        # Criar a tabela produtos se não existir
        self.c.execute('''
            CREATE TABLE IF NOT EXISTS produtos (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                nome TEXT,
                quantidade INTEGER,
                preco REAL
            )
        ''')

        self.conn.commit()

        # Carregar produtos do banco de dados
        self.carregar_produtos()

        # Criar widgets
        self.label_produto = ttk.Label(root, text="Lista de Produtos:")
        self.button_consultar_produtos = ttk.Button(root, text="Consultar Produtos", command=self.mostrar_tabela)
        self.button_cadastrar_produto = ttk.Button(root, text="Cadastrar Novo Produto", command=self.cadastrar_novo_produto)
        self.button_vender = ttk.Button(root, text="Vender", command=self.abrir_janela_vendas)  
        self.button_editar_produto = ttk.Button(root, text="Editar Produto", command=self.abrir_aba_edicao)

        # Layout dos widgets
        self.label_produto.grid(row=0, column=0, padx=5, pady=5, sticky=tk.W)
        self.button_consultar_produtos.grid(row=1, column=0, padx=5, pady=5)
        self.button_cadastrar_produto.grid(row=2, column=0, padx=5, pady=5)
        self.button_vender.grid(row=3, column=0, padx=5, pady=5)  
        self.button_editar_produto.grid(row=4, column=0, padx=5, pady=5)  

        # Adiciona vinculador de evento para a tecla Enter
        self.root.bind('<Return>', self.enter_pressed)

    def enter_pressed(self, event):
        focused_widget = self.root.focus_get()

        if isinstance(focused_widget, tk.Button):
            focused_widget.invoke()

    def mostrar_tabela(self):
        tabela = tk.Toplevel(self.root)
        tabela.title("Consulta de Produtos")

        tree = ttk.Treeview(tabela, columns=("ID", "Produto", "Quantidade", "Preço"), show="headings")
        tree.heading("ID", text="ID")
        tree.heading("Produto", text="Produto")
        tree.heading("Quantidade", text="Quantidade")
        tree.heading("Preço", text="Preço")

      # Aumentar em cinquenta por cento o tamanho da janela
        largura_atual = self.root.winfo_width()
        altura_atual = self.root.winfo_height()
        nova_largura = int(largura_atual * 700)
        nova_altura = int(altura_atual * 700)
        self.root.geometry(f"{nova_largura}x{nova_altura}")

        self.c.execute('SELECT * FROM produtos')
        for row in self.c.fetchall():
            tree.insert("", "end", values=row)

        tree.pack()
      # Aumentar em cinquenta por cento o tamanho da janela
        largura_atual = self.root.winfo_width()
        altura_atual = self.root.winfo_height()
        nova_largura = int(largura_atual * 700)
        nova_altura = int(altura_atual * 700)
        self.root.geometry(f"{nova_largura}x{nova_altura}")

    def abrir_janela_vendas(self):
        janela_vendas = tk.Toplevel(self.root)
        janela_vendas.title("Janela de Vendas")

      # Aumentar em cinquenta por cento o tamanho da janela de vendas
        largura_atual = janela_vendas.winfo_width()
        altura_atual = janela_vendas.winfo_height()
        nova_largura = int(largura_atual * 700)
        nova_altura = int(altura_atual * 700)
        janela_vendas.geometry(f"{nova_largura}x{nova_altura}")

        janela_vendas.configure(bg="#b3ffb3")

        ttk.Label(janela_vendas, text="Selecione o Produto:").grid(row=0, column=0, padx=5, pady=5, sticky=tk.W)

        produtos = self.obter_nomes_produtos()
        combo_produto = ttk.Combobox(janela_vendas, values=produtos)
        combo_produto.grid(row=0, column=1, padx=5, pady=5, sticky=tk.W)

        ttk.Label(janela_vendas, text="Quantidade:").grid(row=1, column=0, padx=5, pady=5, sticky=tk.W)
        entry_quantidade = ttk.Entry(janela_vendas)
        entry_quantidade.grid(row=1, column=1, padx=5, pady=5, sticky=tk.W)

        ttk.Label(janela_vendas, text="Valor Total:").grid(row=2, column=0, padx=5, pady=5, sticky=tk.W)
        valor_total_var = tk.StringVar()
        valor_total_label = ttk.Label(janela_vendas, textvariable=valor_total_var)
        valor_total_label.grid(row=2, column=1, padx=5, pady=5, sticky=tk.W)

        ttk.Button(janela_vendas, text="Calcular Valor Total", command=lambda: self.calcular_valor_total(combo_produto.get(), entry_quantidade.get(), valor_total_var)).grid(row=3, column=0, columnspan=2, pady=10)

        ttk.Button(janela_vendas, text="Finalizar Venda", command=lambda: self.finalizar_venda(combo_produto.get(), entry_quantidade.get())).grid(row=4, column=0, columnspan=2, pady=10)

    def finalizar_venda(self, produto, quantidade):
        try:
            quantidade = int(quantidade)
        except ValueError:
            messagebox.showerror("Erro", "Por favor, insira uma quantidade válida.")
            return

        estoque_atual = self.obter_quantidade_produto(produto)

        if quantidade > estoque_atual:
            messagebox.showerror("Erro", "Quantidade insuficiente em estoque.")
            return

        novo_estoque = estoque_atual - quantidade
        self.atualizar_estoque_produto(produto, novo_estoque)

        messagebox.showinfo("Venda Finalizada", f"Venda de {quantidade} unidades de {produto} finalizada com sucesso!")

    def limpar_entradas(self, *entradas):
        for entry in entradas:
            entry.delete(0, tk.END)

    def calcular_valor_total(self, produto, quantidade, valor_total_var):
        try:
            quantidade = int(quantidade)
        except ValueError:
            messagebox.showerror("Erro", "Por favor, insira uma quantidade válida.")
            return

        preco_unitario = self.obter_preco_produto(produto)
        valor_total = quantidade * preco_unitario
        valor_total_var.set(f"R$ {valor_total:.2f}")

    def obter_nomes_produtos(self):
        self.c.execute('SELECT nome FROM produtos')
        return [row[0] for row in self.c.fetchall()]

    def obter_quantidade_produto(self, produto):
        self.c.execute('SELECT quantidade FROM produtos WHERE nome = ?', (produto,))
        resultado = self.c.fetchone()
        if resultado:
            return resultado[0]
        else:
            return 0

    def atualizar_estoque_produto(self, produto, quantidade):
        self.c.execute('UPDATE produtos SET quantidade = ? WHERE nome = ?', (quantidade, produto))
        self.conn.commit()

    def carregar_produtos(self):
        self.c.execute('SELECT COUNT(*) FROM produtos')
        count = self.c.fetchone()[0]
        if count == 0:
            produtos_default = [
                ("Bota", 50, 129.99),
                ("Coturno", 30, 89.99),
                ("Mule", 40, 59.99),
                ("Mocassim", 35, 79.99),
                ("Oxford", 25, 99.99),
                ("Rasteirinha", 45, 39.99),
                ("Scarpin", 20, 109.99),
                ("Sandália", 30, 69.99),
                ("Sapatilha", 40, 49.99),
                ("Tênis", 50, 79.99)
            ]

            self.c.executemany('INSERT INTO produtos (nome, quantidade, preco) VALUES (?, ?, ?)', produtos_default)
            self.conn.commit()

    def cadastrar_novo_produto(self):
        janela_cadastro = tk.Toplevel(self.root)
        janela_cadastro.title("Cadastro de Novo Produto")

      # Aumentar em cinquenta por cento o tamanho da janela de cadastro
        largura_atual = janela_cadastro.winfo_width()
        altura_atual = janela_cadastro.winfo_height()
        nova_largura = int(largura_atual * 700)
        nova_altura = int(altura_atual * 700)
        janela_cadastro.geometry(f"{nova_largura}x{nova_altura}")

        label_nome = ttk.Label(janela_cadastro, text="Nome do Produto:")
        entry_nome = ttk.Entry(janela_cadastro)
        label_quantidade = ttk.Label(janela_cadastro, text="Quantidade:")
        entry_quantidade = ttk.Entry(janela_cadastro)
        label_preco = ttk.Label(janela_cadastro, text="Preço:")
        entry_preco = ttk.Entry(janela_cadastro)

        button_salvar = ttk.Button(janela_cadastro, text="Salvar", command=lambda: self.salvar_novo_produto(entry_nome.get(), entry_quantidade.get(), entry_preco.get()))

        label_nome.grid(row=0, column=0, padx=5, pady=5, sticky=tk.W)
        entry_nome.grid(row=0, column=1, padx=5, pady=5, sticky=tk.W)
        label_quantidade.grid(row=1, column=0, padx=5, pady=5, sticky=tk.W)
        entry_quantidade.grid(row=1, column=1, padx=5, pady=5, sticky=tk.W)
        label_preco.grid(row=2, column=0, padx=5, pady=5, sticky=tk.W)
        entry_preco.grid(row=2, column=1, padx=5, pady=5, sticky=tk.W)
        button_salvar.grid(row=3, column=0, columnspan=2, pady=10)

    def salvar_novo_produto(self, nome, quantidade, preco):
        try:
            quantidade = int(quantidade)
            preco = float(preco)
        except ValueError:
            messagebox.showerror("Erro", "Por favor, insira valores válidos para quantidade e preço.")
            return

        if nome and quantidade >= 0 and preco >= 0:
            self.c.execute('INSERT INTO produtos (nome, quantidade, preco) VALUES (?, ?, ?)', (nome, quantidade, preco))
            self.conn.commit()
            messagebox.showinfo("Cadastro realizado", f"Produto {nome} cadastrado com sucesso!")
        else:
            messagebox.showerror("Erro", "Por favor, preencha todos os campos corretamente.")

    def obter_preco_produto(self, produto):
        self.c.execute('SELECT preco FROM produtos WHERE nome = ?', (produto,))
        resultado = self.c.fetchone()
        if resultado:
            return resultado[0]
        else:
            return 0

    def abrir_aba_edicao(self):
        aba_edicao = tk.Toplevel(self.root)
        aba_edicao.title("Edição de Produtos")

        tree = ttk.Treeview(aba_edicao, columns=("ID", "Produto", "Quantidade", "Preço"), show="headings")
        tree.heading("ID", text="ID")
        tree.heading("Produto", text="Produto")
        tree.heading("Quantidade", text="Quantidade")
        tree.heading("Preço", text="Preço")

        self.c.execute('SELECT * FROM produtos')
        for row in self.c.fetchall():
            tree.insert("", "end", values=row)

        tree.bind("<Double-1>", self.abrir_janela_edicao_produto)

        tree.pack()

    def abrir_janela_edicao_produto(self, event):
        item = event.widget.selection()[0]
        produto_id = event.widget.item(item, "values")[0]

        janela_edicao = tk.Toplevel(self.root)
        janela_edicao.title("Edição de Produto")

        self.c.execute('SELECT * FROM produtos WHERE id = ?', (produto_id,))
        produto = self.c.fetchone()

        ttk.Label(janela_edicao, text="Nome:").grid(row=0, column=0, padx=5, pady=5, sticky=tk.W)
        entry_nome = ttk.Entry(janela_edicao)
        entry_nome.grid(row=0, column=1, padx=5, pady=5, sticky=tk.W)
        entry_nome.insert(0, produto[1])

        ttk.Label(janela_edicao, text="Quantidade:").grid(row=1, column=0, padx=5, pady=5, sticky=tk.W)
        entry_quantidade = ttk.Entry(janela_edicao)
        entry_quantidade.grid(row=1, column=1, padx=5, pady=5, sticky=tk.W)
        entry_quantidade.insert(0, produto[2])

        ttk.Label(janela_edicao, text="Preço:").grid(row=2, column=0, padx=5, pady=5, sticky=tk.W)
        entry_preco = ttk.Entry(janela_edicao)
        entry_preco.grid(row=2, column=1, padx=5, pady=5, sticky=tk.W)
        entry_preco.insert(0, produto[3])

        ttk.Button(janela_edicao, text="Salvar", command=lambda: self.salvar_edicao_produto(produto_id, entry_nome.get(), entry_quantidade.get(), entry_preco.get())).grid(row=3, column=0, columnspan=2, pady=10)

    def salvar_edicao_produto(self, produto_id, nome, quantidade, preco):
        try:
            produto_id = int(produto_id)
            quantidade = int(quantidade)
            preco = float(preco)
        except ValueError:
            messagebox.showerror("Erro", "Por favor, insira valores válidos para ID, quantidade e preço.")
            return

        if nome and quantidade >= 0 and preco >= 0:
            self.c.execute('UPDATE produtos SET nome=?, quantidade=?, preco=? WHERE id=?', (nome, quantidade, preco, produto_id))
            self.conn.commit()
            messagebox.showinfo("Edição realizada", f"Produto {nome} editado com sucesso!")
        else:
            messagebox.showerror("Erro", "Por favor, preencha todos os campos corretamente.")

if __name__ == "__main__":
    root = tk.Tk()
    app = SistemaFabricaSapatos(root)
    root.mainloop()
